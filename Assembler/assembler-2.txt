TASK 1:

Set the lowest bit in the registry R0 to 1.
(R0 contains any testing value)

ORG 00h
CLR a
MOV R0, #08h
MOV a, R0
ORL a, #01b
MOV R0, a
END

----------------------------------------------
TASK 2:

Set the lowest and highest bit in the registry
R0 to 1. (R0 contains any testing value)

ORG 00h
CLR a
MOV R0, #08h
MOV a, R0
ORL a, #10000001b
MOV R0, a
END

----------------------------------------------
TASK 3:

Write a program which adds two numbers in
memory locations next to each other and then
adds that sum to the total sum. Use indirect
addressing when reading the data. The data is
stored in locations 20h to 25h (3 sets).

ORG 00h
CLR a
MOV R0, #20h
MOV R1, #21h
MOV R3, #00h
LOOP:
	CLR a
	ADD a, @R0
	ADD a, @R1
	ADD a, R3
	MOV R3, a
	INC R0
	INC R0
	INC R1
	INC R1
	CJNE R1, #26h, LOOP
END

----------------------------------------------
TASK 4:

Input values from 01h to 05h into memory loca-
tions 20h to 24h. After that, multiply their
values with 09h and replace the old value with
the new one. Use indirect addressing.

ORG 00h
CLR a
MOV R0, #20h
MOV a, #01h
WRITE:
	MOV @R0, a
	INC R0
	INC a
	CJNE a, #06h, WRITE
CLR a
MOV b, #09h
MOV R0, #20H
MULTIPLY:
	MOV a, @R0
	MUL ab
	MOV @R0, a
	MOV b, #09h
	INC R0
	CJNE R0, #25h, MULTIPLY
END

----------------------------------------------
TASK 5:

Write the program that will calculate the area
of an isosceles triangle which has the length
of base 07h (stored in memory location 20h)
and height of 04h (stored in memory location
21h). Store the result in registry R0.

ORG 00h
CLR a
MOV 20h, #07h
MOV 21h, #04h
MOV a, 20h
MOV b, 21h
MUL ab
MOV b, #02h
DIV ab
MOV R0, a
END

----------------------------------------------
TASK 6:

Calculate the average value of data stored in
memory locations 20h-24h. Store the result in
registry R2 and the remainder in registry R3.

ORG 00h
CLR a
MOV R1, #05h
MOV R0, #20h
LOOP:
	ADD a, @R0
	INC R0
	DJNZ R1, LOOP
MOV b, #05h
DIV ab
MOV R2, a
MOV R3, b
END

----------------------------------------------
TASK 7:

Divide the content of registry R0 by the 
content of registry R1. Store the result in 
registry R2 (answer) and in registry R3 
(reminder). Clear the registry R0 then restore
it's original content.

ORG 00h
CLR a
MOV R0, #0Bh
MOV R1, #03h
MOV a, R0
MOV b, R1
DIV ab
MOV R2, a
MOV R3, b
MOV R0, #00h
MOV b, R1
MUL ab
ADD a, R3
MOV R0, a
END

----------------------------------------------