TASK 1:

Multiply numbers 12h and 0Fh using registers a and b.
Subtract 02h from the result.

ORG 0000
CLR a
MOV a, #12h
MOV B, #0Fh
MUL ab
SUBB a, #02h
END

-------------------------------------------------------
TASK 2:

Transfer the data 51h into indirectly addressed memory 
location 2Ah using R0 registry. Afterwards, transfer 
the data into accumulator and increase it by 1 and 
store the data into the location 2Bh.

ORG 00h
CLR a
MOV R0, #2Ah
MOV @R0, #51h
MOV a, @R0
INC a
MOV 2Bh, a
END

-------------------------------------------------------
TASK 3:

Define a variable called CLUE and give it a value of
35h. Move the value 1Fh in the accumulator and perform
operation OR over the accumulator and variable CLUE.
Store the result in the address 2Ch.

ORG 00h
CLR a
CLUE EQU 35h
MOV a, #1Fh
ORL a,#CLUE
MOV 2Ch, a
END

-------------------------------------------------------
TASK 4:

Using the accumulator, location 1Fh and 20h, add the
numbers from 01h to 0Fh. Store the sum on the location
21h.

ORG 00h
CLR a
MOV 1Fh, #01h
MOV 20h, #0Fh
LOOP:
	ADD a, 1Fh
	INC 1Fh
	DJNZ 20h, LOOP
MOV 21h, a
END

-------------------------------------------------------
TASK 5:

Input the value 75h in register R6. Decrease that value
by 1. Transfer the new value in location 29h. Increase
it by 1 and push it to stack.

ORG 00h
CLR a
MOV R6, #75h
DEC R6
MOV 29h, R6
INC 29h
PUSH 29h
END

-------------------------------------------------------
TASK 6:

Store the value 20h in the accumulator, and in the 
memory location 40h store the constant 2. Divide these
values and store the result in register R3.

ORG 00h
CLR a
MOV a, #20h
MOV 40h, #02h
MOV b, 40h
DIV ab
MOV R3, a
END

-------------------------------------------------------
TASK 7:

Define symbol called "address" and give it the value
of 13h. Input the value 2Ch in the accumulator, and on
the location 13h input the value of E4h. Execute the
logical OR operation over the accumulator and content
of the address. Move the result to the location 14h.

ORG 00h
CLR a
ADDRESS EQU 13h
MOV a, #2Ch
MOV 13h, #0E4h
ORL a, ADDRESS
MOV 14h, a
END

-------------------------------------------------------
TASK 8:

Store the value 26h in the accumulator, and in the 
location 1Eh constant 11h. Execute logical AND in a way
the result is stored in the accumulator. Store the 
given result in memory address 1Fh using indirect
addressing over register R0.

ORG 00h
CLR a
MOV a, #26h
MOV 1Eh, #11h
ANL a, 1Eh
MOV R0, #1Fh
MOV @R0, a
END

-------------------------------------------------------
TASK 9:

Using the accumulator, location 2Ch and location 2Dh,
add the numbers from 1 to 9 together and store the sum
in the location 2Eh.

ORG 00h
CLR a
MOV 2Ch, #01h
MOV 2Dh, #09h
LOOP:
	ADD a, 2Ch
	INC 2Ch
	DJNZ 2Dh, LOOP
MOV 2Eh, a
END

-------------------------------------------------------
TASK 10:

Using the accumulator, location B3h and register R6,
add the numbers from 5 to 15 and store the sum in the
register R2.

ORG 00h
CLR a
MOV B3h, #0Bh
MOV R6, #05h
LOOP:
	ADD a, R6
	INC R6
	DJNZ 23h, LOOP
MOV R2, a
END

-------------------------------------------------------